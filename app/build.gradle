import org.gradle.internal.os.OperatingSystem

buildscript {
  repositories {
    google()
    jcenter()
    maven { url 'https://maven.google.com' }
  }

  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    classpath 'de.mobilej.unmock:UnMockPlugin:0.6.4'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.google.firebase.firebase-perf'


android {
  compileSdkVersion 30

  buildFeatures {
    viewBinding {
      enabled = true
    }
    dataBinding {
      enabled = true
    }
  }

  def versionFile = file('version.properties')
  Properties version = new Properties()
  if (!versionFile.canRead()) {
    version['VERSION'] = 0
  } else {
    version.load(new FileInputStream(versionFile))
  }
  if (':app:assembleRelease' in gradle.startParameter.taskNames
      || ':app:bundleRelease' in gradle.startParameter.taskNames) {
    version['VERSION'] = (version['VERSION'].toInteger() + 1).toString()
    version['ENTITIES'] = (fileTree(dir: 'src/main/assets/entities').getFiles().size()).toString()
    version.store(versionFile.newWriter(), null)
  }

  defaultConfig {
    applicationId "net.ixitxachitls.companion"
    minSdkVersion 24
    targetSdkVersion 30
    versionCode version['VERSION'].toInteger()
    versionName version['NAME']
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      lintOptions {
        disable 'MissingTranslation'
      }

      resValue("string", "app_version", version['NAME'])
      resValue("string", "app_build", version['VERSION'])
      resValue("integer", "app_entities", version['ENTITIES'])
    }

    debug {
      versionNameSuffix ".debug"
      debuggable true
      resValue("string", "app_version", version['NAME'])
      resValue("string", "app_build", version['VERSION'] + ' (DEBUG)')
      resValue("integer", "app_entities", version['ENTITIES'])
    }
  }
  packagingOptions {
    pickFirst 'plugin.xml'
    pickFirst 'META-INF/DEPENDENCIES'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/MANIFEST.MF'
    pickFirst 'META-INF/plexus/components.xml'
  }
  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
    unitTests {
      includeAndroidResources = true
    }
  }
  buildToolsVersion '28.0.3'
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.9.1'
  }
  plugins {
    lite {
      // Never versions seem to clash with firebase.
      artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
    }
    convertProtoData {
      println('creating binary protos')
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        //  remove java
        //}
        //task.plugins {
        //  lite { }
        java {
          option "lite"
        }
      }
    }
  }
}

configurations {
  protoc
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')

  testImplementation 'com.google.protobuf:protobuf-lite:3.0.1'

  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
  implementation 'com.google.android.material:material:1.2.1'
  implementation 'com.google.guava:guava:30.1-jre'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'com.google.inject:guice:4.2.3'
  implementation 'com.google.android:flexbox:1.0.0'
  implementation 'com.google.firebase:firebase-core:18.0.0'
  implementation 'com.google.firebase:firebase-auth:20.0.1'
  implementation 'com.google.android.gms:play-services-auth:19.0.0'
  implementation 'com.google.firebase:firebase-firestore:22.0.1'
  implementation 'com.google.firebase:firebase-storage:19.2.1'
  implementation 'com.google.android.gms:play-services-auth:19.0.0'
  implementation 'com.firebaseui:firebase-ui-auth:4.2.0'
  implementation 'com.google.firebase:firebase-database:19.6.0'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'com.google.firebase:firebase-perf:19.0.11'
  implementation 'com.google.http-client:google-http-client-gson:1.38.0'
  implementation 'com.google.firebase:firebase-auth:20.0.1'
  implementation('com.google.api-client:google-api-client-android:1.31.1') {
    exclude group: 'org.apache.httpcomponents'
  }
  implementation('com.google.apis:google-api-services-drive:v3-rev99-1.23.0') {
    exclude group: 'org.apache.httpcomponents'
  }
  implementation 'com.tenmiles:helpstack:1.2.0'

  testImplementation 'junit:junit:4.13.1'
  testImplementation 'org.mockito:mockito-core:3.7.0'
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  testImplementation 'org.robolectric:robolectric:4.4'
  androidTestImplementation 'androidx.test:runner:1.3.0'
  androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0') {
    exclude group: 'com.google.code.findbugs'
  }
  androidTestUtil 'androidx.test:orchestrator:1.3.0'
  Map platformMapping = [
      (OperatingSystem.WINDOWS): 'windows-x86_64',
      (OperatingSystem.MAC_OS) : 'osx-x86_64'
  ].withDefault { 'linux-x86_64' }
  protoc "com.google.protobuf:protoc:3.14.0:${platformMapping.get(OperatingSystem.current())}@exe"
  // Architecture components.
  implementation 'androidx.lifecycle:lifecycle-common-java8:2.2.0'
  implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
  testImplementation 'androidx.arch.core:core-testing:2.1.0'
  androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
}

ext.convertToBinaryProto = { inputFile, outputFile, proto ->
  // Make sure the output directory exists.
  def dir = file(outputFile.replaceFirst(/[^\\\/]*$/, ""))
  if (!dir.exists()) {
    println("creating direcoty $dir")
    dir.mkdirs()
  }

  if (file(inputFile).lastModified() > file(outputFile).lastModified()) {
    exec {
      println("convert $inputFile to $outputFile ($proto)")
      executable configurations.protoc.singleFile
      args '--proto_path=' + file('./src/main/proto/')
      args "--encode=$proto"
      args file('./src/main/proto/template.proto')

      standardInput = new FileInputStream(file(inputFile))
      standardOutput = new FileOutputStream(file(outputFile))
      errorOutput = System.err
    }
  }
}

ext.convertToBinaryProtos = { input, type, proto ->
  FileTree entities = fileTree(input)
  FileTree filtered = entities.matching {
    include "**/${type}/*.ascii"
  }

  filtered.files.each { f ->
    convertToBinaryProto(f, f.path.replaceFirst(/[^\/\\]*[\/\\]([^\\\/]*[\/\\]${type}[\\\/].*)\.ascii$/, {
      all, path -> "assets/entities/" + path + ".pb"
    }), proto)
  }
}

task convertProtoData{
  doLast {
    convertToBinaryProtos('./src/main/entities', 'monster',
        'net.ixitxachitls.companion.proto.MonsterTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'level',
        'net.ixitxachitls.companion.proto.LevelTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'world',
        'net.ixitxachitls.companion.proto.WorldTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'item',
        'net.ixitxachitls.companion.proto.ItemTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'feat',
        'net.ixitxachitls.companion.proto.FeatTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'miniature',
        'net.ixitxachitls.companion.proto.MiniatureTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'skill',
        'net.ixitxachitls.companion.proto.SkillTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'spell',
        'net.ixitxachitls.companion.proto.SpellTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'quality',
        'net.ixitxachitls.companion.proto.QualityTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'adventure',
        'net.ixitxachitls.companion.proto.AdventureTemplateProto')
    convertToBinaryProtos('./src/main/entities', 'product',
        'net.ixitxachitls.companion.proto.ProductTemplateProto')
  }
}

apply plugin: 'com.google.gms.google-services'

// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'