import org.gradle.internal.os.OperatingSystem

buildscript {
  repositories {
    google()
    jcenter()
    maven { url 'https://maven.google.com' }
  }

  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    classpath 'com.google.protobuf:protobuf-java:3.1.0'
  }
}

apply plugin: 'com.google.protobuf'
apply plugin: 'com.android.application'

android {
  compileSdkVersion 26
  defaultConfig {
    // There is a typo in the application id. Changing that requires a new entry in the play
    // store. We should do this when we rename the app.
    applicationId "net.ixitxachitls.companion"
    minSdkVersion 24
    targetSdkVersion 26
    versionCode 123
    versionName "Aasimar"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    // Enabling multidex support.
    multiDexEnabled true
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      lintOptions {
        disable 'MissingTranslation'
      }
    }
  }
  packagingOptions {
    pickFirst 'plugin.xml'
    pickFirst 'META-INF/DEPENDENCIES'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/plexus/components.xml'
  }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.1.0'
  }
  plugins {
    lite {
      artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
    }
    convertProtoData {
      println('creating binary protos')
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        remove java
      }
      task.plugins {
        lite {
        }
      }
    }
  }
}

configurations {
  protoc
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation 'com.android.support:appcompat-v7:26.1.0'
  implementation 'com.android.support.constraint:constraint-layout:1.0.2'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.1'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
  Map platformMapping = [
      (OperatingSystem.WINDOWS): 'windows-x86_32',
      (OperatingSystem.MAC_OS) : 'osx-x86_32'
  ].withDefault { 'linux-x86_32' }
  protoc "com.google.protobuf:protoc:3.1.0:${platformMapping.get(OperatingSystem.current())}@exe"
  implementation 'com.android.support:design:26.1.0'
  implementation 'com.google.guava:guava:21.0'
  implementation 'com.android.support:support-v4:26.1.0'
  implementation 'com.google.protobuf:protobuf-java:3.1.0'
  implementation 'com.google.inject:guice:4.1.0'
  implementation 'com.android.support:multidex:1.0.2'
  implementation 'com.google.android.gms:play-services-drive:11.6.0'

  // Architecture components.
  implementation "android.arch.lifecycle:common-java8:1.0.0"
  annotationProcessor "android.arch.lifecycle:compiler:1.0.0"
  implementation "android.arch.lifecycle:extensions:1.0.0"
}


def convertToBinaryProto(inputFile, outputFile, proto) {
  // make sure the output directory exists
  def dir = file(outputFile.replaceFirst(/[^\/]*$/, ""))
  if (!dir.exists()) {
    println("creating direcoty $dir")
    dir.mkdirs()
  }

  if (file(inputFile).lastModified() > file(outputFile).lastModified()) {
    println("convert $inputFile to $outputFile ($proto)")
    exec {
      executable configurations.protoc.singleFile
      args '--proto_path=' + file('./src/main/proto/')
      args "--encode=$proto"
      args file('./src/main/proto/entity.proto')

      standardInput = new FileInputStream(file(inputFile))
      standardOutput = new FileOutputStream(file(outputFile))
      errorOutput = System.err
      //standardOutput = System.out
    }
  }
}

def convertToBinaryProtos(input, type, proto) {
  FileTree entities = fileTree(input);
  FileTree filtered = entities.matching {
    include "**/${type}/*.ascii"
  }

  filtered.files.each { f ->
    convertToBinaryProto(f, f.path.replaceFirst(/[^\/]*\/([^\/]*\/${type}\/.*)\.ascii$/, {
      all, path -> "assets/entities/" + path + ".pb"
    }), proto)
  }
}

task convertProtoData {
  convertToBinaryProtos('./src/main/entities', 'monster',
      'net.ixitxachitls.companion.proto.MonsterProto')
  convertToBinaryProtos('./src/main/entities', 'level',
      'net.ixitxachitls.companion.proto.LevelProto')
  convertToBinaryProtos('./src/main/entities', 'world',
      'net.ixitxachitls.companion.proto.WorldProto')
}

